#+TITLE: Emacs.d
#+AUTHOR: Sean Brage
#+EMAIL: seanmbrage@me.com
* Overview & Inspiration
This is an attempt at creating a more readable and extensible Emacs
configuration using [[http://orgmode.org][org-mode]] to write my configuration in the world's
greatest text format. Many thanks go to Andrew Jarrett and [[https://github.com/ahrjarrett/.emacs.d][his
excellent config files]] for providing inspiration and direction.

* Checking Host Operating System
Some settings, like fonts, home folder location, etc. are going to
vary somewhat between macOS, Linux, and Windows. This helper function
will ease the pain somewhat for platform-specific settings.
#+BEGIN_SRC emacs-lisp
(defun my-system-type ()
  (symbol-value 'system-type))
#+END_SRC
* Appearance & Theme
** UI Appearance
I prefer to just see the Emacs frame with no menus, etc. 
#+BEGIN_SRC emacs-lisp
;; Remove os GUI stuff, it's ugly
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC
** Theme
I have tried lots and lots of themes, but Atom One Dark is still the one that
I think is all-around the best.
#+BEGIN_SRC emacs-lisp
;; load atom-one-dark theme
(use-package atom-one-dark-theme
:init (load-theme 'atom-one-dark t))
#+END_SRC
** Font
While there are lots of cool fonts out there like Fira Code, Hack,
Dank Mono, and more, I have found a couple of things to be true:

1. Installing the same font across multiple computers and operating
   systems is a bit of a PITA.
2. Fancy fonts are another thing to fiddle with, and it's easy to
   change them constantly like you change hats.

The solution to the font problem is actually pretty simple: /just use
monospaced system fonts/. It's not rocket science. Ergo, using our
handy-dandy =(my-system-type)= function, we can tell Emacs to use the
best available system typeface for the respective host's OS.
#+BEGIN_SRC emacs-lisp
(when (string-equal (my-system-type) 'darwin)
  (set-face-attribute 'default nil
                    :family "Menlo"
                    :height 140))

(when (string-equal (my-system-type) 'windows-nt)
  (set-face-attribute 'default nil
                    :family "Consolas"
                    :height 140))
#+END_SRC
* Files & Buffers
** Ace Window
Ace Window makes it easier to jump between multiple windows. I like
it.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :init (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC
** Saving & Backup Files
I like to type fewer characters when confirming options. I also hate
backup files.
#+BEGIN_SRC emacs-lisp
;; Change 'yes or no' options to 'y or n'
(fset 'yes-or-no-p 'y-or-n-p)

;; disable auto-save and auto-backup
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq inhibit-startup-message t)
#+END_SRC

** Buffer Settings
*** ibuffer
The default buffer list is somewhat lacking IMO. Particularly, it
doesn't play nicely with split windows, and presents a /very/
barebones set of information. That's all well and fine, but Emacs also
ships with ibuffer-mode, which is just better IMO.
#+BEGIN_SRC emacs-lisp
;; use ibuffer by default
(defalias 'list-buffers 'ibuffer)
#+END_SRC
** Emacs Server/Client
One of the great things about Emacs is that it can run as a server,
allowing you to open files from external services in a new buffer
/within/ your existing Emacs session.
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
* Projects
** Magit
Magit is one of those, "switch to Emacs just so you can use..." packages. The only other Git interface that comes /close/ is Visual Studio Code, but you can't run that in emacs (yet).
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :init (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** Projectile
Projectile makes it really easy to get around different projects and repos.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :init
  (projectile-mode 1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

* Coding & Text Editing
** Smartparens
It is nice to have your editor try to put parens, brackets, braces,
etc. in the right places automagically.
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :init 
  (require 'smartparens-config)
  (add-hook 'lisp-mode-hook #'smartparens-mode)
  (add-hook 'web-mode-hook #'smartparens-mode)
  (add-hook 'js-mode-hook #'smartparens-mode))
#+END_SRC
** Rainbow Delimeters
This useful package provides matching colors to parens, brackets,
etc. at every "level", making it easy to scan your code for scopes,
etc.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
  (add-hook 'web-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'js-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Editorconfig
Editorconfig ([[https://editorconfig.org/][editorconfig.org]]) is a wonderful tool for ensuring
project-wide consistency across editors and IDEs. Basically, it lets a
team easily enforce spacing, tabs, semicolon, final-lines, and other
fiddly rules.

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
;; counsel (ivy) for better ido-like completion in emacs
(use-package counsel
  :ensure t
  :init
  ;; turn it on plz
  (ivy-mode 1)
  ;; Default settings
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char))

;; counsel-projectile provides wonderful project-based shortcuts and completion
(use-package counsel-projectile
  :ensure t)
#+END_SRC

** Company Mode
   Company mode seems to still be the more broadly-used autocompletion library for emacs, so as much as I like auto-complete, we will stick with company for now.
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init 
  (setq company-idle-delay 0.2)
  (setq company-minimum-prefix-length 3)
  (setq company-dabbrev-downcase nil)
  (add-hook 'lisp-mode-hook #'company-mode)
  (add-hook 'web-mode-hook #'company-mode)
  (add-hook 'js-mode-hook #'company-mode)
  (add-hook 'python-mode-hook #'company-mode))
#+END_SRC

** Snippets
Snippets are the best. Let's use them.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :init (yas-global-mode 1))
#+END_SRC
* Web Development
** HTML + CSS
*** Emmet
Emmet can be thought of as Yasnippet for HTML, providing a rich expansion syntax for HTML templating.
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t
  :init
  (add-hook 'web-mode-hook #'emmet-mode)
  (add-hook 'js-mode-hook #'emmet-mode))
#+END_SRC
*** Web Mode
Web Mode makes working with HTML, CSS, and related technologies much nicer.
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
  (setq web-mode-enable-current-element-highlight t)
  (setq-default web-mode-enable-auto-closing t)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-css-indent-offset 2)
  (setq-default web-mode-code-indent-offset 2))
#+END_SRC

*** CSS Indentation
#+BEGIN_SRC emacs-lisp
(setq-default css-indent-offset 2)
#+END_SRC
* Org Mode
Org Mode is why you should /start/ using Emacs. This is how I like my
config:
#+BEGIN_SRC emacs-lisp
;; store org files in Dropbox
(setq-default org-directory "~/Dropbox/org")
(setq org-agenda-files '("~/Dropbox/org"))
;; fill columns in org mode (keep lines from going on into infinity)
(add-hook 'org-mode-hook (lambda () (auto-fill-mode 1)))
;; org-indent-mode makes it easier (imo) to visually read and scan in Org
(setq org-startup-indented t)
;; org-mode keybindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC


