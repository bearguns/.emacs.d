#+TITLE: Emacs.d
#+AUTHOR: Sean Brage
#+EMAIL: seanmbrage@me.com
* Overview & Inspiration
This is an attempt at creating a more readable and extensible Emacs
configuration using [[http://orgmode.org][org-mode]] to write my configuration in the world's
greatest text format. Many thanks go to Andrew Jarrett and [[https://github.com/ahrjarrett/.emacs.d][his
excellent config files]] for providing inspiration and direction.

* Emacs Dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard][Emacs Dashboard]] is a wonderful little tool for displaying a whole
bunch of helpful stuff when you start Emacs. Recent files, projectile
projects, org-agenda files and org TODO items...it's great.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
;; install the main package
(use-package page-break-lines)
;; install a dependency the dashboard needs to make pretty lines
#+END_SRC
* UI Appearance
I prefer to just see the Emacs frame with no menus, etc. 
#+BEGIN_SRC emacs-lisp
;; Remove os GUI stuff, it's ugly
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC
* Nyan Mode
I don't do many fancy things in the modeline, packages that "improve"
the modeline can become noisy and fiddly. However, Nyan Mode makes me
extremely happy, so I keep it going.
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :init
  (nyan-mode 1)
  (setq-default nyan-animate-nyancat t)
  (setq nyan-wavy-trail t)
  (nyan-start-animation))
#+END_SRC
* Ace Window
Ace Window makes it easier to jump between multiple windows. I like
it.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :init (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC
* Saving & Backup Files
I like to type fewer characters when confirming options. I also hate
backup files.
#+BEGIN_SRC emacs-lisp
;; Change 'yes or no' options to 'y or n'
(fset 'yes-or-no-p 'y-or-n-p)

;; disable auto-save and auto-backup
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq create-lockfiles nil)
(setq inhibit-startup-message t)
#+END_SRC

* Buffer Settings
** ibuffer
The default buffer list is somewhat lacking IMO. Particularly, it
doesn't play nicely with split windows, and presents a /very/
barebones set of information. That's all well and fine, but Emacs also
ships with ibuffer-mode, which is just better IMO.
#+BEGIN_SRC emacs-lisp
;; use ibuffer by default
(defalias 'list-buffers 'ibuffer)
#+END_SRC
* Emacs Server/Client
One of the great things about Emacs is that it can run as a server,
allowing you to open files from external services in a new buffer
/within/ your existing Emacs session.
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
* Magit
Magit is one of those, "switch to Emacs just so you can use..." packages. The only other Git interface that comes /close/ is Visual Studio Code, but you can't run that in emacs (yet).
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :init (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
* Electric Pairs Mode
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
* Rainbow Delimeters
This useful package provides matching colors to parens, brackets,
etc. at every "level", making it easy to scan your code for scopes,
etc.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
  (add-hook 'web-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'js-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'js2-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Editorconfig
Editorconfig ([[https://editorconfig.org/][editorconfig.org]]) is a wonderful tool for ensuring
project-wide consistency across editors and IDEs. Basically, it lets a
team easily enforce spacing, tabs, semicolon, final-lines, and other
fiddly rules.

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
;; counsel (ivy) for better ido-like completion in emacs
(use-package counsel
  :ensure t
  :init
  ;; turn it on plz
  (ivy-mode 1)
  ;; Default settings
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-c p f") 'counsel-git)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+END_SRC
* Company Mode
   Company mode seems to still be the more broadly-used autocompletion library for emacs, so as much as I like auto-complete, we will stick with company for now.
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (add-hook 'lisp-mode-hook #'company-mode)
  (add-hook 'web-mode-hook #'company-mode)
  (add-hook 'js-mode-hook #'company-mode)
  (add-hook 'js2-mode-hook #'company-mode)
  (add-hook 'python-mode-hook #'company-mode)
  :init 
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase nil))
#+END_SRC

* Snippets
Snippets are the best. Let's use them.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :defer t
  :init (yas-global-mode 1))
#+END_SRC
* Prettier
Prettier is an "opinionated code formatter" for JavaScript. You set it
up, and it forces your code to follow certain standards. You can learn
more about Prettier [[https://prettier.io/][here.]]
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
    :config 
    (add-hook 'js2-mode-hook 'prettier-js-mode))
#+END_SRC
* Emmet
Emmet can be thought of as Yasnippet for HTML, providing a rich expansion syntax for HTML templating.
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t
  :init
  (add-hook 'web-mode-hook #'emmet-mode)
  (add-hook 'js-mode-hook #'emmet-mode))
#+END_SRC
* JS2-Mode
For "pure" JavaScript files (i.e. files with a =.js= extension), I
prefer the features of js2-mode.
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :init
  (add-hook 'js2-mode-hook 'electric-pair-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+END_SRC
* Web Mode
Web Mode makes working with HTML, CSS, and related technologies much nicer.
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
  :init
  (add-hook 'web-mode-hook 'emmet-mode)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-auto-pairing nil)
  (setq-default web-mode-enable-auto-closing t)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-css-indent-offset 2)
  (setq-default web-mode-code-indent-offset 2))
#+END_SRC
* Web Mode + Vue.js + Prettier
There are some hoops to jump through to make sure web-mode handles
=.vue= files while also allowing Prettier to do its thing.
#+BEGIN_SRC emacs-lisp
(defun enable-minor-mode (my-pair)
  "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
  (if (buffer-file-name)
      (if (string-match (car my-pair) buffer-file-name)
      (funcall (cdr my-pair)))))

(add-hook 'web-mode-hook #'(lambda ()
                            (enable-minor-mode
                             '("\\.vue?\\'" . prettier-js-mode))))
#+END_SRC
* CSS Indentation
#+BEGIN_SRC emacs-lisp
(setq-default css-indent-offset 2)
#+END_SRC
* Org Mode
Org Mode is why you should /start/ using Emacs. This is how I like my
config:
#+BEGIN_SRC emacs-lisp
;; store org files in Dropbox
(setq-default org-directory "~/Dropbox/org")
(setq org-agenda-files '("~/Dropbox/org"))
;; fill columns in org mode (keep lines from going on into infinity)
(add-hook 'org-mode-hook (lambda () (auto-fill-mode 1)))
;; org-indent-mode makes it easier (imo) to visually read and scan in Org
(setq org-startup-indented t)
;; org-mode keybindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC


